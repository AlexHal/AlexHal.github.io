[
  {
    "name": "Simple-Version-Control",
    "html_url": "https://github.com/AlexHal/Simple-Version-Control",
    "readme": "A lightweight C++ application for managing file versions using a linked list-based version control system. This tool allows users to track, compare, and restore previous versions of a file while maintaining simplicity.\n\n## Features\n\n- **Version Control**: \n  - Add file content as new versions only if changes are detected.\n  - Remove specific versions and renumber remaining versions.\n  - Restore any version to the original file.\n- **Comparison**: Compare two versions line-by-line, highlighting differences.\n- **Search**: Search all versions for a specific keyword.\n- **Persistence**: Save and load version data from a file for session continuity.\n\n## How It Works\n\n- Each file version is stored in a linked list, with unique hashes for change detection.\n- Users interact through a simple menu for adding, removing, printing, comparing, and searching versions.\n- File data and metadata are saved to a persistent storage file.\n\n## How to Run\n\n1. Compile the program:\n   ```bash\n   g++ -o file_versioning SVC.cpp\n"
  },
  {
    "name": "Thread-Scheduler",
    "html_url": "https://github.com/AlexHal/Thread-Scheduler",
    "readme": "A lightweight user-level thread scheduler implemented in C, designed to manage compute and I/O tasks with first-come, first-served (FCFS) scheduling.\n\n## Features\n\n- **User-Level Threads**: Implements thread creation, context switching, and termination.\n- **Dual Executors**: \n  - Compute Executor (C-EXEC): Handles compute tasks.\n  - I/O Executor (I-EXEC): Manages blocking I/O tasks to prevent delays in compute operations.\n- **Task Management**:\n  - FCFS scheduling using ready and wait queues.\n  - Tasks yield or terminate via `sut_yield()` and `sut_exit()`.\n  - Dynamic task creation with `sut_create()`.\n- **File I/O**: Support for opening, reading, writing, and closing files using dedicated functions (`sut_open()`, `sut_read()`, etc.).\n- **Graceful Shutdown**: Terminates executors and cleans up resources with `sut_shutdown()`.\n\n## API\n\n- `sut_init()`: Initializes the scheduler.\n- `sut_create(task_function)`: Creates a new task.\n- `sut_yield()`: Pauses the current task and schedules the next one.\n- `sut_exit()`: Terminates the current task.\n- File operations: `sut_open()`, `sut_read()`, `sut_write()`, `sut_close()`.\n- `sut_shutdown()`: Shuts down the scheduler and its executors.\n\n## Technologies\n\n- **Language**: C\n- **Platform**: Linux/Unix\n- **Key Libraries**: `makecontext()`, `swapcontext()`, queue management.\n\n## How to Run\n\n1. Clone this repository.\n2. Compile the library and main program:\n   ```bash\n   gcc -o thread_scheduler thread_scheduler.c\n"
  },
  {
    "name": "Shell",
    "html_url": "https://github.com/AlexHal/Shell",
    "readme": "A custom Unix shell implemented in C, showcasing core functionalities of a command-line interface and process management.\n\n## Features\n\n- **Command Execution**: Executes user commands using `fork()` and `execvp()` with support for foreground and background processes.\n- **Built-In Commands**: Includes:\n  - `cd`: Change directories.\n  - `pwd`: Print current directory.\n  - `echo`: Display messages.\n  - `exit`: Terminate the shell.\n  - `jobs`: List background processes.\n  - `fg`: Bring background jobs to the foreground.\n- **Redirection**: Redirects command output to files using `dup()`.\n- **Piping**: Implements command chaining with pipes via `pipe()`.\n\n## Technologies\n\n- **Language**: C\n- **Platform**: Linux/Unix\n- **Key System Calls**: `fork()`, `execvp()`, `pipe()`, `dup()`, `waitpid()`\n\n## How to Run\n\n1. Clone this repository.\n2. Compile the shell using `gcc`:\n   ```bash\n   gcc -o my_shell shell.c\n"
  }
]